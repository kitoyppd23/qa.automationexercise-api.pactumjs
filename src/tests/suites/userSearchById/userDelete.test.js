/**
 * Testes de Exclus√£o de Usu√°rio por ID - ServeRest API
 * Implementa padr√£o Triple A (Arrange, Act, Assert)
 * 
 * Endpoint testado:
 * - DELETE /usuarios/{_id} - Excluir usu√°rio por ID
 */
const { spec } = require('pactum');

// Fun√ß√£o para gerar email √∫nico
function generateUniqueEmail() {
  const timestamp = Date.now();
  const random = Math.floor(Math.random() * 1000);
  return `usuario_${timestamp}_${random}@teste.com`;
}

describe('Testes de Exclus√£o de Usu√°rio por ID - ServeRest API', () => {

  // ===== TESTES DE EXCLUS√ÉO COM SUCESSO =====

  test('Deve excluir usu√°rio por ID com sucesso', async () => {
    // ARRANGE - Primeiro cria um usu√°rio para depois excluir
    const userData = {
      nome: 'Usu√°rio para Excluir',
      email: generateUniqueEmail(),
      password: 'teste123',
      administrador: 'false'
    };

    console.log('üìù Criando usu√°rio para exclus√£o:', {
      nome: userData.nome,
      email: userData.email
    });

    // Cria o usu√°rio
    const createResponse = await spec()
      .post('https://serverest.dev/usuarios')
      .withHeaders({
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      })
      .withJson(userData)
      .expectStatus(201);

    const userId = createResponse.body._id;
    console.log('‚úÖ Usu√°rio criado com ID:', userId);

    // ACT - Exclui o usu√°rio
    console.log('üóëÔ∏è Excluindo usu√°rio com ID:', userId);
    const deleteResponse = await spec()
      .delete(`https://serverest.dev/usuarios/${userId}`)
      .withHeaders({
        'Accept': 'application/json'
      })
      .expectStatus(200);

    console.log('üì• Resposta da exclus√£o:', deleteResponse.body);

    // ASSERT - Valida a resposta
    expect(deleteResponse.body).toHaveProperty('message', 'Registro exclu√≠do com sucesso');
  });

  test('Deve excluir usu√°rio espec√≠fico por ID', async () => {
    // ARRANGE - ID de um usu√°rio conhecido (pode ser um que voc√™ criou)
    const userId = 'oAEoWK4MID9G8C23'; // ID do exemplo que voc√™ mostrou

    console.log('üóëÔ∏è Excluindo usu√°rio espec√≠fico com ID:', userId);

    // ACT - Exclui o usu√°rio
    const response = await spec()
      .delete(`https://serverest.dev/usuarios/${userId}`)
      .withHeaders({
        'Accept': 'application/json'
      })
      .expectStatus(200);

    console.log('üì• Resposta:', response.body);

    // ASSERT - Valida a resposta
    expect(response.body).toHaveProperty('message');
    // Pode retornar "Registro exclu√≠do com sucesso" ou "Nenhum registro exclu√≠do"
    expect(['Registro exclu√≠do com sucesso', 'Nenhum registro exclu√≠do']).toContain(response.body.message);
  });

  // ===== TESTES NEGATIVOS =====

  test('Deve falhar ao tentar excluir usu√°rio com ID inv√°lido', async () => {
    // ARRANGE - ID inv√°lido
    const invalidUserId = 'ID_INVALIDO_123';

    console.log('‚ùå Tentando excluir usu√°rio com ID inv√°lido:', invalidUserId);

    // ACT & ASSERT - Deve retornar 200 com mensagem espec√≠fica
    await spec()
      .delete(`https://serverest.dev/usuarios/${invalidUserId}`)
      .withHeaders({
        'Accept': 'application/json'
      })
      .expectStatus(200)
      .expectJson({
        message: 'Nenhum registro exclu√≠do'
      });
  });

  test('Deve retornar mensagem quando tentar excluir usu√°rio j√° exclu√≠do', async () => {
    // ARRANGE - Primeiro cria um usu√°rio
    const userData = {
      nome: 'Usu√°rio para Excluir Duas Vezes',
      email: generateUniqueEmail(),
      password: 'teste123',
      administrador: 'false'
    };

    // Cria o usu√°rio
    const createResponse = await spec()
      .post('https://serverest.dev/usuarios')
      .withHeaders({
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      })
      .withJson(userData)
      .expectStatus(201);

    const userId = createResponse.body._id;
    console.log('üìù Usu√°rio criado para teste de exclus√£o dupla:', userId);

    // Primeira exclus√£o (deve funcionar)
    await spec()
      .delete(`https://serverest.dev/usuarios/${userId}`)
      .withHeaders({
        'Accept': 'application/json'
      })
      .expectStatus(200);

    console.log('‚úÖ Primeira exclus√£o realizada');

    // ACT - Segunda exclus√£o (deve retornar mensagem espec√≠fica)
    console.log('üîÑ Tentando excluir o mesmo usu√°rio novamente');
    const secondDeleteResponse = await spec()
      .delete(`https://serverest.dev/usuarios/${userId}`)
      .withHeaders({
        'Accept': 'application/json'
      })
      .expectStatus(200);

    console.log('üì• Resposta da segunda exclus√£o:', secondDeleteResponse.body);

    // ASSERT - Valida que retorna a mensagem correta
    expect(secondDeleteResponse.body).toHaveProperty('message', 'Nenhum registro exclu√≠do');
  });

  // ===== TESTES DE CONTRATO =====

  test('Deve validar contrato da resposta de exclus√£o com sucesso', async () => {
    // ARRANGE - Cria um usu√°rio para excluir
    const userData = {
      nome: 'Usu√°rio para Contrato',
      email: generateUniqueEmail(),
      password: 'teste123',
      administrador: 'false'
    };

    const createResponse = await spec()
      .post('https://serverest.dev/usuarios')
      .withHeaders({
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      })
      .withJson(userData)
      .expectStatus(201);

    const userId = createResponse.body._id;

    // ACT - Exclui o usu√°rio
    const response = await spec()
      .delete(`https://serverest.dev/usuarios/${userId}`)
      .withHeaders({
        'Accept': 'application/json'
      })
      .expectStatus(200);

    // ASSERT - Valida contrato
    expect(response.body).toMatchObject({
      message: 'Registro exclu√≠do com sucesso'
    });
  });

  test('Deve validar contrato da resposta quando usu√°rio n√£o existe', async () => {
    // ARRANGE - ID que n√£o existe
    const nonExistentUserId = 'ID_QUE_NAO_EXISTE_123';

    // ACT - Tenta excluir usu√°rio que n√£o existe
    const response = await spec()
      .delete(`https://serverest.dev/usuarios/${nonExistentUserId}`)
      .withHeaders({
        'Accept': 'application/json'
      })
      .expectStatus(200);

    // ASSERT - Valida contrato
    expect(response.body).toMatchObject({
      message: 'Nenhum registro exclu√≠do'
    });
  });

});
